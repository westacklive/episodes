// Code generated by queryx, DO NOT EDIT.

package db

import (
	"fmt"
	"snap/db/queryx"
	"strings"
)

type Card struct {
	ID        int64           `json:"id" db:"id"`
	Name      string          `json:"name" db:"name"`
	Cost      int32           `json:"cost" db:"cost"`
	Power     int32           `json:"power" db:"power"`
	Ability   string          `json:"ability" db:"ability"`
	DefID     string          `json:"defID" db:"def_id"`
	CreatedAt queryx.Datetime `json:"createdAt" db:"created_at"`
	UpdatedAt queryx.Datetime `json:"updatedAt" db:"updated_at"`
	DeckCards []*DeckCard     `json:"deckCards"`
	Deck      []*Deck         `json:"deck"`

	schema  *queryx.Schema
	queries Queries
}

// String implements the stringer interface.
func (c *Card) String() string {
	var b strings.Builder
	b.WriteString("(Card ")
	b.WriteString(fmt.Sprintf("id: %v", c.ID))
	b.WriteString(", ")
	b.WriteString(fmt.Sprintf(`name: "%s"`, c.Name))
	b.WriteString(", ")
	b.WriteString(fmt.Sprintf("cost: %v", c.Cost))
	b.WriteString(", ")
	b.WriteString(fmt.Sprintf("power: %v", c.Power))
	b.WriteString(", ")
	b.WriteString(fmt.Sprintf(`ability: "%s"`, c.Ability))
	b.WriteString(", ")
	b.WriteString(fmt.Sprintf(`def_id: "%s"`, c.DefID))
	b.WriteString(", ")
	b.WriteString(fmt.Sprintf("created_at: %v", c.CreatedAt))
	b.WriteString(", ")
	b.WriteString(fmt.Sprintf("updated_at: %v", c.UpdatedAt))
	b.WriteString(")")
	return b.String()
}

func (c *Card) applyChange(change *queryx.CardChange) error {
	if change == nil {
		return nil
	}
	if change.ID.Set {
		c.ID = change.ID.Val
	}
	if change.Name.Set {
		c.Name = change.Name.Val
	}
	if change.Cost.Set {
		c.Cost = change.Cost.Val
	}
	if change.Power.Set {
		c.Power = change.Power.Val
	}
	if change.Ability.Set {
		c.Ability = change.Ability.Val
	}
	if change.DefID.Set {
		c.DefID = change.DefID.Val
	}
	if change.CreatedAt.Set {
		c.CreatedAt = change.CreatedAt
	}
	if change.UpdatedAt.Set {
		c.UpdatedAt = change.UpdatedAt
	}
	return nil
}
func (c *Card) Update(change *queryx.CardChange) error {
	_, err := c.queries.QueryCard().Where(c.schema.And(c.schema.CardID.EQ(c.ID))).UpdateAll(change)
	if err != nil {
		return err
	}

	return c.applyChange(change)
}

func (c *Card) Delete() error {
	_, err := c.queries.QueryCard().Delete(c.ID)
	return err
}

func (c *Card) QueryDeckCards() *DeckCardQuery {
	return c.queries.QueryDeckCard().Where(c.schema.DeckCardCardID.EQ(c.ID))
}

func (c *Card) QueryDeck() *DeckQuery {
	return c.queries.QueryDeck().
		Joins("INNER JOIN deck_cards ON deck_cards.deck_id = deck.id").
		Where(c.schema.DeckCardCardID.EQ(c.ID))
}
