// Code generated by queryx, DO NOT EDIT.

package db

import (
	"fmt"
	"snap/db/queryx"
	"strings"
)

type DeckCard struct {
	ID        int64           `json:"id" db:"id"`
	DeckID    queryx.BigInt   `json:"deckID" db:"deck_id"`
	CardID    queryx.BigInt   `json:"cardID" db:"card_id"`
	CreatedAt queryx.Datetime `json:"createdAt" db:"created_at"`
	UpdatedAt queryx.Datetime `json:"updatedAt" db:"updated_at"`
	Deck      *Deck           `json:"deck"`
	Card      *Card           `json:"card"`

	schema  *queryx.Schema
	queries Queries
}

// String implements the stringer interface.
func (d *DeckCard) String() string {
	var b strings.Builder
	b.WriteString("(DeckCard ")
	b.WriteString(fmt.Sprintf("id: %v", d.ID))
	b.WriteString(", ")
	b.WriteString(fmt.Sprintf("deck_id: %s", d.DeckID))
	b.WriteString(", ")
	b.WriteString(fmt.Sprintf("card_id: %s", d.CardID))
	b.WriteString(", ")
	b.WriteString(fmt.Sprintf("created_at: %v", d.CreatedAt))
	b.WriteString(", ")
	b.WriteString(fmt.Sprintf("updated_at: %v", d.UpdatedAt))
	b.WriteString(")")
	return b.String()
}

func (d *DeckCard) applyChange(change *queryx.DeckCardChange) error {
	if change == nil {
		return nil
	}
	if change.ID.Set {
		d.ID = change.ID.Val
	}
	if change.DeckID.Set {
		d.DeckID = change.DeckID
	}
	if change.CardID.Set {
		d.CardID = change.CardID
	}
	if change.CreatedAt.Set {
		d.CreatedAt = change.CreatedAt
	}
	if change.UpdatedAt.Set {
		d.UpdatedAt = change.UpdatedAt
	}
	return nil
}
func (d *DeckCard) Update(change *queryx.DeckCardChange) error {
	_, err := d.queries.QueryDeckCard().Where(d.schema.And(d.schema.DeckCardID.EQ(d.ID))).UpdateAll(change)
	if err != nil {
		return err
	}

	return d.applyChange(change)
}

func (d *DeckCard) Delete() error {
	_, err := d.queries.QueryDeckCard().Delete(d.ID)
	return err
}
