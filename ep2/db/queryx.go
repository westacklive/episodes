// Code generated by queryx, DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"os"
	"snap/db/queryx"
)

type Queries interface {
	QueryCard() *CardQuery
	QueryDeckCard() *DeckCardQuery
	QueryDeck() *DeckQuery
}

type QXClient struct {
	db     *sql.DB
	config *queryx.Config
	logger queryx.Logger
	*queryx.Adapter
	*queryx.Schema
}

func NewClient() (*QXClient, error) {
	env := os.Getenv("QUERYX_ENV")
	if env == "" {
		env = "development"
	}
	return NewClientWithEnv(env)
}

func NewClientWithEnv(env string) (*QXClient, error) {
	config := queryx.NewConfig(env)
	if config == nil {
		return nil, fmt.Errorf("client config is missing for %s", env)
	}
	db, err := sql.Open("postgres", config.URL)
	if err != nil {
		return nil, err
	}

	client := &QXClient{
		db:      db,
		config:  config,
		Adapter: queryx.NewAdapter(db),
		Schema:  queryx.NewSchema(),
	}
	client.setDefaultLogger()

	return client, nil
}

func (c *QXClient) SetLogger(logger queryx.Logger) {
	c.logger = logger
}

func (c *QXClient) setDefaultLogger() {
	c.logger = log.New(os.Stderr, "sql ", log.Llongfile|log.LstdFlags)
}

func (c *QXClient) QueryCard() *CardQuery {
	return NewCardQuery(c.Adapter, c.Schema, c)
}

func (c *QXClient) QueryDeckCard() *DeckCardQuery {
	return NewDeckCardQuery(c.Adapter, c.Schema, c)
}

func (c *QXClient) QueryDeck() *DeckQuery {
	return NewDeckQuery(c.Adapter, c.Schema, c)
}

type Tx struct {
	*queryx.Schema
	*queryx.Adapter
	tx     *sql.Tx
	client *QXClient
}

func (c *QXClient) Tx() (*Tx, error) {
	ctx := context.Background()
	tx, err := c.db.BeginTx(ctx, nil)
	if err != nil {
		return nil, err
	}

	return &Tx{
		tx:      tx,
		Schema:  c.Schema,
		Adapter: queryx.NewAdapter(tx),
		client:  c,
	}, nil
}

func (tx *Tx) Commit() error {
	return tx.tx.Commit()
}

func (tx *Tx) Rollback() error {
	return tx.tx.Rollback()
}

func (tx *Tx) QueryCard() *CardQuery {
	return NewCardQuery(tx.Adapter, tx.Schema, tx)
}

func (tx *Tx) QueryDeckCard() *DeckCardQuery {
	return NewDeckCardQuery(tx.Adapter, tx.Schema, tx)
}

func (tx *Tx) QueryDeck() *DeckQuery {
	return NewDeckQuery(tx.Adapter, tx.Schema, tx)
}
