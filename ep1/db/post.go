// Code generated by queryx, DO NOT EDIT.

package db

import (
	"ep1/db/queryx"
	"fmt"
	"strings"
)

type Post struct {
	ID          int64           `json:"id" db:"id"`
	Title       queryx.String   `json:"title" db:"title"`
	Content     queryx.String   `json:"content" db:"content"`
	IsPublished queryx.Boolean  `json:"isPublished" db:"is_published"`
	CreatedAt   queryx.Datetime `json:"createdAt" db:"created_at"`
	UpdatedAt   queryx.Datetime `json:"updatedAt" db:"updated_at"`

	schema  *queryx.Schema
	queries Queries
}

// String implements the stringer interface.
func (p *Post) String() string {
	var b strings.Builder
	b.WriteString("(Post ")
	b.WriteString(fmt.Sprintf("id: %v", p.ID))
	b.WriteString(", ")
	b.WriteString(fmt.Sprintf("title: %s", p.Title))
	b.WriteString(", ")
	b.WriteString(fmt.Sprintf("content: %s", p.Content))
	b.WriteString(", ")
	b.WriteString(fmt.Sprintf("is_published: %s", p.IsPublished))
	b.WriteString(", ")
	b.WriteString(fmt.Sprintf("created_at: %v", p.CreatedAt))
	b.WriteString(", ")
	b.WriteString(fmt.Sprintf("updated_at: %v", p.UpdatedAt))
	b.WriteString(")")
	return b.String()
}

func (p *Post) applyChange(change *queryx.PostChange) error {
	if change == nil {
		return nil
	}
	if change.ID.Set {
		p.ID = change.ID.Val
	}
	if change.Title.Set {
		p.Title = change.Title
	}
	if change.Content.Set {
		p.Content = change.Content
	}
	if change.IsPublished.Set {
		p.IsPublished = change.IsPublished
	}
	if change.CreatedAt.Set {
		p.CreatedAt = change.CreatedAt
	}
	if change.UpdatedAt.Set {
		p.UpdatedAt = change.UpdatedAt
	}
	return nil
}
func (p *Post) Update(change *queryx.PostChange) error {
	_, err := p.queries.QueryPost().Where(p.schema.And(p.schema.PostID.EQ(p.ID))).UpdateAll(change)
	if err != nil {
		return err
	}

	return p.applyChange(change)
}

func (p *Post) Delete() error {
	_, err := p.queries.QueryPost().Delete(p.ID)
	return err
}
