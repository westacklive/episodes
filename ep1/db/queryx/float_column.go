// Code generated by queryx, DO NOT EDIT.

package queryx

import "fmt"

type FloatColumn struct {
	Name  string
	Table *Table
}

func (t *Table) NewFloatColumn(name string) *FloatColumn {
	return &FloatColumn{
		Table: t,
		Name:  name,
	}
}

func (c *FloatColumn) EQ(v float64) *Clause {
	return &Clause{
		fragment: fmt.Sprintf("%s.%s = ?", c.Table.Name, c.Name),
		args:     []interface{}{v},
	}
}

func (c *FloatColumn) GT(v float64) *Clause {
	return &Clause{
		fragment: fmt.Sprintf("%s.%s > ?", c.Table.Name, c.Name),
		args:     []interface{}{v},
	}
}

func (c *FloatColumn) LT(v float64) *Clause {
	return &Clause{
		fragment: fmt.Sprintf("%s.%s < ?", c.Table.Name, c.Name),
		args:     []interface{}{v},
	}
}

func (c *FloatColumn) GE(v float64) *Clause {
	return &Clause{
		fragment: fmt.Sprintf("%s.%s >= ?", c.Table.Name, c.Name),
		args:     []interface{}{v},
	}
}

func (c *FloatColumn) LE(v float64) *Clause {
	return &Clause{
		fragment: fmt.Sprintf("%s.%s <= ?", c.Table.Name, c.Name),
		args:     []interface{}{v},
	}
}

func (c *FloatColumn) In(v []float64) *Clause {
	return &Clause{
		fragment: fmt.Sprintf("%s.%s IN (?)", c.Table.Name, c.Name),
		args:     []interface{}{v},
	}
}

func (c *FloatColumn) Asc() string {
	return fmt.Sprintf("%s.%s ASC", c.Table.Name, c.Name)
}

func (c *FloatColumn) Desc() string {
	return fmt.Sprintf("%s.%s DESC", c.Table.Name, c.Name)
}
